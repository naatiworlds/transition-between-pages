---
interface Props {
	title: string;
}

const { title } = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Astro description">
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<meta name="view-transition" content="same-origin" />
		<title>{title}</title>
	</head>
	<body>
		<slot />
	</body>
</html>
<style is:global>
	
	html {
		font-family: system-ui, sans-serif;
		background-color: #F6F6F6;
	}
	code {
		font-family: Menlo, Monaco, Lucida Console, Liberation Mono, DejaVu Sans Mono,
			Bitstream Vera Sans Mono, Courier New, monospace;
	}

	@keyframes fade-in {
		from { opacity: 0; }
	}
	@keyframes fade-out {
		to { opacity: 0; }
	}
	@keyframes slide-from-right {
		from { transform: translateX(30px); }
	}
	@keyframes slide-from-left {
		to { transform: translateX(-30px); }
	}
	::view-transition-old(root) {
		animation: 210ms cubic-bezier(0.4, 0, 1, 1) both fade-out,
			700ms cubic-bezier(0.4, 0, 0.2, 1) both slide-to-left;
	}
	::view-transition-new(root) {
		animation: 210ms cubic-bezier(0, 0, 0.2, 1) 90ms both fade-in,
			700ms cubic-bezier(0.4, 0, 0.2, 1) both slide-from-right;
	}
</style>

<script>
	if(document.startViewTransition){
		window.navigation.addEventListener('navigate', (event) => {
		
			const toUrl = new URL(event.destination.url) // Creamos un objeto de tipo URL
	
			if(location.origin !== toUrl.origin) return // Nos aseguramos que esto solo pase dentro de nuestro dominio
	
			/**
			 * event.intercept es una forma de viewTransition de capturar 
			 * la ruta a la que queremos navegar haciendo una foto de la 
			 * página anterior y otra de la página siguiente mediante un 
			 * fetch de texto plano con una regex para quedarnos con todo 
			 * lo que esté entre la etiqueta <body>[todo lo que está 
			 * aquí]</body>
			 */
			event.intercept({
				async handler () {
					const response = await fetch(toUrl.pathname)
					const text = await response.text()
	
					const data = text.match(/<body>([\s\S]*)<\/body>/i)[1]
					
					// Le vamos a indicar como tiene que actualizar la vista
					// Es decir, que contenido tiene que mostrar y como
					document.startViewTransition(() => {
						document.body.innerHTML = data
						document.documentElement.scrollTop = 0
					})
				}
			})
		}) 
	}
</script>